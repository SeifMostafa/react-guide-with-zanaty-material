{"componentChunkName":"component---src-templates-lesson-template-js","path":"/why-react-is-awesome","result":{"data":{"markdownRemark":{"html":"<p>it's been a long time that I want to take a chance to write about one of my fav things in my life which it's react, of\ncourse, react... so let's first start by</p>\n<h2 id=\"whats-is-reactjs\" style=\"position:relative;\"><a href=\"#whats-is-reactjs\" aria-label=\"whats is reactjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>What's is reactjs?</strong></h2>\n<p>As described</p>\n<ol>\n<li><a href=\"https://reactjs.org/docs/getting-started.html\">React-js</a> documentation it's a JavaScript library for building user\ninterfaces.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/React_(JavaScript_library)\">Wikipedia</a> React is a JavaScript library for building user\ninterfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as\na base in the development of single-page or mobile applications, as it is optimal for fetching rapidly changing data\nthat needs to be recorded.</li>\n</ol>\n<p>so after we know simple definitions about react let's dive into <strong>Why I Luv react and why it's really awesome ?!!!</strong></p>\n<h3 id=\"composition\" style=\"position:relative;\"><a href=\"#composition\" aria-label=\"composition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composition</h3>\n<p>In programming... The composition is combining simple functions to build a more complicated one.</p>\n<p>Let's think of composition with another way In\nmathematics, <a href=\"https://en.wikipedia.org/wiki/Function_composition\">Function Composition</a> is an operation that takes two\nfunctions  <code class=\"language-text\">f</code> and g and produces a function h such that <code class=\"language-text\">h(x) = g(f(x))</code> In this operation, the function <code class=\"language-text\">g</code> is applied to the result of applying the function <em>f</em> to <em>x</em>. That is, the\nfunctions <code class=\"language-text\">f : X → Y and g : Y → Z</code> are <strong>composed</strong> to yield a function that maps <code class=\"language-text\">x in X to g(f(x))\nin Z</code>.</p>\n<p>I see that things might go to be more complicated so now let's take an example,\nusing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map()</a> to create a\nnew array from an initial set of data, and then filtering the result\nusing <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter()</a> as a **\nNOTE:**  <em>map, filter think of them as a factory or containers that given an initial list (array of things), transform\nit into something else, while keeping that same original list intact. :</em></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const people = ['Mohammed', 'Yasmeen', 'Elzanaty', 'Hamza', 'Saad']; \npeople.map(name => name[0]).filter(char => char === 'M') //'M'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mohammed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yasmeen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Elzanaty'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hamza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Saad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \npeople<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span> <span class=\"token operator\">=></span> char <span class=\"token operator\">===</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//'M'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3 id=\"imperative-code\" style=\"position:relative;\"><a href=\"#imperative-code\" aria-label=\"imperative code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://tylermcginnis.com/imperative-vs-declarative-programming/\">Imperative Code</a></h3>\n<p>we tell code exactly what to do and how to do it.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const people = ['Mohammed', 'Yasmeen', 'Elzanaty', 'Hamza', 'Saad']; \nconst excitedPeople = [];\nfor (let i = 0; i < people.length; i++) {\n   excitedPeople[i] = people[i] + '!'\n}\n// [&quot;Mohammed!&quot;, &quot;Yasmeen!&quot;, &quot;Elzanaty!&quot;, &quot;Hamza!&quot;, &quot;Saad!&quot;]`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mohammed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yasmeen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Elzanaty'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hamza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Saad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> excitedPeople <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   excitedPeople<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// [\"Mohammed!\", \"Yasmeen!\", \"Elzanaty!\", \"Hamza!\", \"Saad!\"]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"declarative-code\" style=\"position:relative;\"><a href=\"#declarative-code\" aria-label=\"declarative code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js\">Declarative Code</a></h3>\n<p>It's an easy and better approach for me, bcoz you let the computer do all that you need for you, you just want to\nexpress the logic of a computation without describing its control flow we don't code up all of the steps to get us to\nthe end result. Instead, we declare what we want to be done, and code will take care of doing it.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const people = ['Mohammed', 'Yasmeen', 'Elzanaty', 'Hamza', 'Saad']; \nconst excitedPeople = people.map(name => name + '!')\n// [&quot;Mohammed!&quot;, &quot;Yasmeen!&quot;, &quot;Elzanaty!&quot;, &quot;Hamza!&quot;, &quot;Saad!&quot;]`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mohammed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yasmeen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Elzanaty'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hamza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Saad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> excitedPeople <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"Mohammed!\", \"Yasmeen!\", \"Elzanaty!\", \"Hamza!\", \"Saad!\"]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p><strong>Imperative code,</strong> instructs code for how to perform each step.</p>\n</blockquote>\n<blockquote>\n<p><strong>Declarative code</strong>, instructs code for what we want to be done, and let code take care of performing the steps.</p>\n</blockquote>\n<h3 id=\"unidirectional-data-flow\" style=\"position:relative;\"><a href=\"#unidirectional-data-flow\" aria-label=\"unidirectional data flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unidirectional Data Flow</h3>\n<p>In general, this concept means that data has one, and only one, way to be transferred to other parts of the application.</p>\n<p>In React, the data flows from the parent component to a child component. so data flows in only one direction Parent =>\nChild. If data is shared between sibling child components, then the data should be stored in the parent component and\npassed to both of the child components that need it.</p>\n<h3 id=\"virtual-dom\" style=\"position:relative;\"><a href=\"#virtual-dom\" aria-label=\"virtual dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://reactjs.org/docs/optimizing-performance.html#avoid-reconciliation\">Virtual DOM</a></h3>\n<p>First of all — the <em>Virtual DOM</em> was not invented by React, but React uses it and provides it for free.</p>\n<p>The <em>Virtual DOM</em> is an abstraction of the HTML DOM. It is lightweight and detached from the browser-specific\nimplementation details. Since the DOM itself was already an abstraction, the virtual DOM is, in fact, an abstraction of\nan abstraction.</p>\n<p>The Virtual DOM reflects a tree in which each node is an HTML element. React is able to traverse and carry out\noperations on this Virtual DOM, saving our app from having \"costly\" activity on the actual DOM.</p>\n<p><img src=\"https://media-exp1.licdn.com/dms/image/C5612AQFbwsKzJw4v2A/article-inline_image-shrink_1000_1488/0/1565018330860?e=1622678400&#x26;v=beta&#x26;t=LrGecxs5TAlZyZnSwzPb7CZwLqzomp3-yuqGKT-o4kw\" alt=\"No alt text provided for this image\"></p>\n<h3 id=\"the-diffing-algorithm\" style=\"position:relative;\"><a href=\"#the-diffing-algorithm\" aria-label=\"the diffing algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm\">The Diffing Algorithm</a></h3>\n<p>Diffing determines how to make efficient changes to the DOM. With diffing, old DOM nodes are taken out and replaced only\nwhen necessary. This way, our app doesn't perform any unnecessary operations to figure out when to render content.</p>","frontmatter":{"path":"/why-react-is-awesome","title":"Why React is Awesome","order":"2A","section":"Intro","description":"Why React is Awesome"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"10A","path":"/react-dev-tools","title":"React Dev Tools"}}},{"node":{"frontmatter":{"order":"11A","path":"/react-state-and-lifecycles","title":"State and Lifecycle Methods with React"}}},{"node":{"frontmatter":{"order":"2A","path":"/why-react-is-awesome","title":"Why React is Awesome"}}},{"node":{"frontmatter":{"order":"3A","path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":"4A","path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":"5A","path":"/npm","title":"NPM"}}},{"node":{"frontmatter":{"order":"6A","path":"/create-react-app","title":"Kick off with create-react-app"}}},{"node":{"frontmatter":{"order":"7A","path":"/prettier","title":"Prettier"}}},{"node":{"frontmatter":{"order":"8A","path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":"9A","path":"/component-composition","title":"Component Composition"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}